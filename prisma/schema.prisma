generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id @default(cuid())
  name          String
  email         String       @unique
  passwordHash  String
  role          Role         @default(USER)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  profile       Profile?
  challenges    UserChallenge[]
  logs          LogEntry[]
  reflections   Reflection[]
}

model Profile {
  id        String @id @default(cuid())
  userId    String @unique
  bio       String?
  avatarUrl String?
  theme     String? // "light" | "dark"
  user      User    @relation(fields: [userId], references: [id])
}

model Challenge {
  id          String           @id @default(cuid())
  title       String
  description String
  level       Int
  isActive    Boolean          @default(true)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  users       UserChallenge[]
}

model UserChallenge {
  id           String     @id @default(cuid())
  userId       String
  challengeId  String
  status       ChallengeStatus @default(PENDING)
  startedAt    DateTime? 
  completedAt  DateTime?

  user         User       @relation(fields: [userId], references: [id])
  challenge    Challenge  @relation(fields: [challengeId], references: [id])
}

model LogEntry {
  id        String   @id @default(cuid())
  userId    String
  title     String
  content   String
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])
}

model Reflection {
  id        String   @id @default(cuid())
  userId    String
  content   String
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])
}

enum Role {
  USER
  ADMIN
}

enum ChallengeStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}